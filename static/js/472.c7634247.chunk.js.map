{"version":3,"file":"static/js/472.c7634247.chunk.js","mappings":"kOAQMA,EAAaC,EAAAA,GAAAA,KAAH,moBA8FhB,UAzDkB,WAEd,IAAMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAExB,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,SAACC,GACvB,OAAQA,EAAMC,OAAOC,MACnB,IAAK,QAASR,EAASM,EAAMC,OAAOE,OAClC,MACF,IAAK,WAAYP,EAAYI,EAAMC,OAAOE,OACxC,MACF,QAAS,OAEV,EAWD,OACI,UAAChB,EAAD,CAAYiB,SAVK,SAACJ,GACtBA,EAAMK,iBAENR,GAASS,EAAAA,EAAAA,IAAW,CAACb,MAAAA,EAAOE,SAAAA,KAE5BD,EAAS,IACTE,EAAY,GACb,EAGK,WACJ,kBAAOW,QAASlB,EAAhB,qBACA,kBACEmB,KAAK,QACLN,KAAK,QACLO,GAAIpB,EACJqB,QAAQ,2CAERP,MAAOV,EACPkB,SAAUZ,EACVa,UAAQ,KAEV,kBAAOL,QAAShB,EAAhB,wBACA,kBACEiB,KAAK,WACDN,KAAK,WACLO,GAAIlB,EACJY,MAAOR,EACXgB,SAAUZ,EACVa,UAAQ,KAGN,mBAAQJ,KAAK,SAAb,sBAGP,C,wDCnGM,IAkBIlB,EAAS,eAACuB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACR,EAAIS,GAWvD,OARET,IAFFS,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { loginThunk } from \"redux/auth/auth.thunk\";\n\n\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\n\ngap: 4px;\nwidth: 300px;\n\n    input {\n        display: flex;\n        width: 210px;\n        flex-direction: column;\n        border: 1px solid silver;\n        border-radius: 4px;\n\n        &:hover,\n        &:focus  {\n        outline: none;\n        border: 1px solid skyblue;\n        }\n    }\n    button {\n    margin-left: auto;\n    background-color: #fff;\n    padding: 5px 10px;\n    border: 1px solid silver;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus  {\n      outline: none;\n      border: 1px solid skyblue;\n    }\n  }\n`\n\n\nconst LoginPage = () => {\n\n    const emailInpudId = nanoid();\n    const passwordInpudId = nanoid();\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\")\n\n    const dispatch = useDispatch();\n\n    const onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"email\": setEmail(event.target.value);\n        break;\n      case \"password\": setPassword(event.target.value);\n        break;\n      default: return;\n    }\n    }\n    \n    const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    dispatch(loginThunk({email, password}))\n\n    setEmail(\"\");\n    setPassword(\"\");\n  }\n\n    return(\n        <StyledForm onSubmit={handleSubmit}>\n    <label htmlFor={emailInpudId}>Email </label>\n    <input\n      type=\"email\"\n      name=\"email\"\n      id={emailInpudId}\n      pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n      \n      value={email}\n      onChange={onInputChange}\n      required\n        />\n    <label htmlFor={passwordInpudId}>Password </label>    \n    <input\n      type=\"password\"\n          name=\"password\"\n          id={passwordInpudId}\n          value={password}\n      onChange={onInputChange}\n      required\n    />\n\n        <button type=\"submit\">Log In</button>\n        \n    </StyledForm>)\n}\n\nexport default LoginPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","emailInpudId","nanoid","passwordInpudId","useState","email","setEmail","password","setPassword","dispatch","useDispatch","onInputChange","event","target","name","value","onSubmit","preventDefault","loginThunk","htmlFor","type","id","pattern","onChange","required","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}