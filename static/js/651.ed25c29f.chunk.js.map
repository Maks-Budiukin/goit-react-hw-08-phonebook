{"version":3,"file":"static/js/651.ed25c29f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","Pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { nanoid } from 'nanoid'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContactsThunk } from \"redux/contacts/contacts.thunk\";\n\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\n\ngap: 4px;\nwidth: 300px;\n\n    input {\n        display: flex;\n        width: 210px;\n        flex-direction: column;\n        border: 1px solid silver;\n        border-radius: 4px;\n\n        &:hover,\n        &:focus  {\n        outline: none;\n        border: 1px solid skyblue;\n        }\n    }\n    button {\n    margin-left: auto;\n    background-color: #fff;\n    padding: 5px 10px;\n    border: 1px solid silver;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus  {\n      outline: none;\n      border: 1px solid skyblue;\n    }\n  }\n`\n\nexport const ContactForm = () => {\n\n  const contacts = useSelector(state => state.contacts.items)\n  const dispatch = useDispatch();\n\n  const nameInpudId = nanoid();\n  const numberInpudId = nanoid();\n  \n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\")\n\n  const onInputChange = (event) => {\n    switch (event.target.name) {\n      case \"name\": setName(event.target.value);\n        break;\n      case \"number\": setNumber(event.target.value);\n        break;\n      default: return;\n    }\n  }\n\n  const normalizedName = name.toLowerCase();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    contacts.find(contact => contact.name.toLowerCase() === normalizedName) \n      ? alert(`${name} is already in contacts `) \n      : dispatch(addContactsThunk({ name: name, number: number }))\n    setName(\"\");\n    setNumber(\"\");\n  }\n\n    return(\n        <StyledForm onSubmit={handleSubmit}>\n    <label htmlFor={nameInpudId}>Name </label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id={nameInpudId}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      value={name}\n      onChange={onInputChange}\n      required\n        />\n    <label htmlFor={numberInpudId}>Number </label>    \n    <input\n      type=\"tel\"\n          name=\"number\"\n          id={numberInpudId}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n      onChange={onInputChange}\n      required\n    />\n\n        <button type=\"submit\">Add contact</button>\n        \n    </StyledForm>)\n}","\nimport styled from \"styled-components\";\nimport { nanoid } from 'nanoid'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { contactsFilter } from \"redux/filter/filter.slice\";\n\nconst StyledFilter = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: 50px;\n    margin-bottom: 20px;\n    label {\n        font-weight: 500;\n        margin-bottom: 8px;\n    }\n    input {\n        width: 200px;\n        border: 1px solid silver;\n        border-radius: 4px;\n\n        &:hover,\n        &:focus  {\n        outline: none;\n        border: 1px solid skyblue;\n        }\n    }\n`\n\nexport const Filter = () => {\n    const filterInpudId = nanoid();\n    \n    const filter = useSelector(state => state.filter);\n    const dispatch = useDispatch();\n\n\n    const onInputChange = (event) => {\n        dispatch(contactsFilter(event.target.value))\n    }\n\n    return (\n        <StyledFilter>\n        <label htmlFor={filterInpudId}>Find contacts by name </label>\n    <input\n        type=\"text\"\n        name=\"filter\"\n        id={filterInpudId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        value={filter}\n        onChange={onInputChange}\n            />\n        </StyledFilter>\n    )\n}","import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\"\nimport { deleteContactsThunk, editContactsThunk } from \"redux/contacts/contacts.thunk\"\nimport styled from \"styled-components\";\nimport { MdDone } from \"react-icons/md\";\nimport { RxCross2 } from \"react-icons/rx\"\nimport { GrEdit } from \"react-icons/gr\"\n\nconst Tick = styled(MdDone)`\n    margin-bottom: 4px;\n`\n\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-evenly;\n\ngap: 4px;\nwidth: 300px;\n\n    input {\n        display: flex;\n        width: 110px;\n        flex-direction: column;\n        border: 1px solid silver;\n        border-radius: 4px;\n\n        &:hover,\n        &:focus  {\n        outline: none;\n        border: 1px solid skyblue;\n        }\n    }\n    button {\n        /* display: inline-block; */\n    margin-left: auto;\n    margin-right: 4px;\n    background-color: #fff;\n    /* padding: 5px 10px; */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: 1px solid silver;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus  {\n      outline: none;\n      border: 1px solid skyblue;\n      color: skyblue;\n    }\n  }\n`\n\n\n\nexport const ContactListItem = ({ name, number, id }) => {\n    const [editForm, setEditForm] = useState(null);\n    const [editName, setEditName] = useState(\"\");\n    const [editNumber, setEditNumber] = useState(\"\")\n\n    const dispatch = useDispatch();\n\n    const nameInpudId = nanoid();\n    const numberInpudId = nanoid();\n\n    const deleteHandler = (id) => {\n        dispatch(deleteContactsThunk(id))\n    }\n\n    const editHandler = () => {\n        setEditForm(name);\n        setEditName(name);\n        setEditNumber(number);\n    }\n\n    const handleEditSubmit = () => {\n        dispatch(editContactsThunk({ id, name: editName, number: editNumber }))\n        setEditForm(null);\n    }\n\n    const onEditInputChange = (event) => {\n    switch (event.target.name) {\n      case \"name\": setEditName(event.target.value);\n        break;\n      case \"number\": setEditNumber(event.target.value);\n        break;\n      default: return;\n    }\n    }\n\n    return (editForm\n        ? (<StyledForm onSubmit={handleEditSubmit}>\n    <label htmlFor={nameInpudId}></label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id={nameInpudId}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      value={editName}\n      onChange={onEditInputChange}\n      required\n        />\n    <label htmlFor={numberInpudId}></label>    \n    <input\n      type=\"tel\"\n          name=\"number\"\n          id={numberInpudId}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={editNumber}\n      onChange={onEditInputChange}\n      required\n    />\n\n        <button type=\"submit\"><Tick/></button>\n        \n    </StyledForm>)\n        : < li key={id} > {name} < span > {number}</span > <button onClick={() => editHandler(id)}><GrEdit/></button> <button onClick={() => deleteHandler(id)}><RxCross2/></button></li >)\n}","import { Filter } from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContactsThunk } from \"redux/contacts/contacts.thunk\";\nimport styled from \"styled-components\";\nimport { ContactListItem } from \"components/ContactListItem/ContactListItem\";\n\nconst StyledList = styled.ul`\n  list-style: none;\n  width: 300px;\n  padding: 0;\n  li {\n    display: flex;\n    gap: 4px;\n    justify-content: space-between;\n    align-items: center;\n    margin: 4px;\n    font-weight: bold;\n  }\n\n  button {\n    background-color: #fff;\n    padding: 5px 10px;\n    border: 1px solid silver;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus  {\n      outline: none;\n      border: 1px solid skyblue;\n    }\n  }\n\n  \n\n  li span {\n    color: black;\n    display: inline-block;\n    margin-left: auto;\n    margin-right: 8px;\n    font-weight: normal;\n  }\n\n`\n\nconst LoadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nexport const ContactList = () => {\n\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn)\n\n  useEffect(() => {\n    isLoggedIn && dispatch(fetchContactsThunk())\n  }, [dispatch, isLoggedIn])\n\n  const normalizedFilter = filter.toLowerCase().trim();\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n\n  return (\n    <StyledList>\n      <LoadingWrapper>\n        <h2>Contact<span>s</span></h2>\n        {isLoading && <RotatingLines\n          strokeColor=\"skyblue\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"28\"\n          visible={true}\n        />}\n      </LoadingWrapper>\n      <Filter />\n      {filteredContacts.map((item) => {\n        return (<ContactListItem key={item.id} name={item.name} number={item.number} id={item.id} />)\n      })}\n    </StyledList>\n  )\n}","import { ContactForm } from \"components/ContactForm/ContactForm\"\nimport { ContactList } from \"components/ContactList/ContactList\"\n\nconst ContactsPage = () => {\n    return (<>\n            <ContactForm />\n            <ContactList />\n    </>)\n}\n\nexport default ContactsPage;"],"names":["StyledForm","styled","ContactForm","contacts","useSelector","state","items","dispatch","useDispatch","nameInpudId","nanoid","numberInpudId","useState","name","setName","number","setNumber","onInputChange","event","target","value","normalizedName","toLowerCase","onSubmit","preventDefault","find","contact","alert","addContactsThunk","htmlFor","type","id","pattern","title","onChange","required","StyledFilter","Filter","filterInpudId","filter","contactsFilter","Tick","MdDone","ContactListItem","editForm","setEditForm","editName","setEditName","editNumber","setEditNumber","onEditInputChange","editContactsThunk","onClick","deleteContactsThunk","deleteHandler","StyledList","LoadingWrapper","ContactList","isLoading","isLoggedIn","auth","useEffect","fetchContactsThunk","normalizedFilter","trim","filteredContacts","includes","strokeColor","strokeWidth","animationDuration","width","visible","map","item"],"sourceRoot":""}