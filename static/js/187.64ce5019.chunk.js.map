{"version":3,"file":"static/js/187.64ce5019.chunk.js","mappings":"kOAQMA,EAAaC,EAAAA,GAAAA,KAAH,moBAmHhB,UA9EgB,WAEZ,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAExB,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACF,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAETC,EAAgB,SAACC,GACvB,OAAQA,EAAMC,OAAOV,MACjB,IAAK,OAAQC,EAAQQ,EAAMC,OAAOC,OAC9B,MACJ,IAAK,QAASR,EAASM,EAAMC,OAAOC,OAChC,MACJ,IAAK,WAAYN,EAAYI,EAAMC,OAAOC,OACtC,MACJ,QAAS,OAEZ,EAaD,OACI,UAAClB,EAAD,CAAYmB,SAZK,SAACH,GACtBA,EAAMI,iBAEJP,GAASQ,EAAAA,EAAAA,IAAS,CAACd,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChCW,QAAQC,IAAIhB,EAAME,EAAOE,GAE3BH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAGK,WAEJ,kBAAOY,QAAStB,EAAhB,oBACA,kBACEuB,KAAK,OACLlB,KAAK,OACLmB,GAAIxB,EACJyB,QAAQ,yHACRC,MAAM,yIACNV,MAAOX,EACPsB,SAAUd,EACVe,UAAQ,KAGV,kBAAON,QAASpB,EAAhB,qBACA,kBACEqB,KAAK,QACLlB,KAAK,QACLmB,GAAItB,EACJuB,QAAQ,2CACRC,MAAM,uDACNV,MAAOT,EACPoB,SAAUd,EACVe,UAAQ,KAGV,kBAAON,QAASnB,EAAhB,wBACA,kBACEoB,KAAK,WACDlB,KAAK,WACLmB,GAAIrB,EACJuB,MAAM,kDACNV,MAAOP,EACXkB,SAAUd,EACVe,UAAQ,KAGN,mBAAQL,KAAK,SAAb,uBAGP,C,wDCxHM,IAkBItB,EAAS,eAAC4B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["Pages/RegPage/RegPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { regThunk } from \"redux/auth/auth.thunk\";\nimport { useDispatch } from \"react-redux\";\n\n\nconst StyledForm = styled.form`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\n\ngap: 4px;\nwidth: 300px;\n\n    input {\n        display: flex;\n        width: 210px;\n        flex-direction: column;\n        border: 1px solid silver;\n        border-radius: 4px;\n\n        &:hover,\n        &:focus  {\n        outline: none;\n        border: 1px solid skyblue;\n        }\n    }\n    button {\n    margin-left: auto;\n    background-color: #fff;\n    padding: 5px 10px;\n    border: 1px solid silver;\n    border-radius: 4px;\n\n    &:hover,\n    &:focus  {\n      outline: none;\n      border: 1px solid skyblue;\n    }\n  }\n`\n\n\nconst RegPage = () => {\n\n    const nameInpudId = nanoid();\n    const emailInpudId = nanoid();\n    const passwordInpudId = nanoid();\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\")\n  \n  const dispatch = useDispatch();\n\n    const onInputChange = (event) => {\n    switch (event.target.name) {\n        case \"name\": setName(event.target.value);\n            break;\n        case \"email\": setEmail(event.target.value);\n            break;\n        case \"password\": setPassword(event.target.value);\n            break;\n        default: return;\n    }\n    }\n    \n    const handleSubmit = (event) => {\n    event.preventDefault();\n    \n      dispatch(regThunk({name, email, password}));\n      console.log(name, email, password)\n      \n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n  }\n\n    return(\n        <StyledForm onSubmit={handleSubmit}>\n\n    <label htmlFor={nameInpudId}>Name </label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      id={nameInpudId}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      value={name}\n      onChange={onInputChange}\n      required\n        />\n            \n    <label htmlFor={emailInpudId}>Email </label>\n    <input\n      type=\"email\"\n      name=\"email\"\n      id={emailInpudId}\n      pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n      title=\"Email must have the following shape: email@email.com\"\n      value={email}\n      onChange={onInputChange}\n      required\n        />\n            \n    <label htmlFor={passwordInpudId}>Password </label>    \n    <input\n      type=\"password\"\n          name=\"password\"\n          id={passwordInpudId}\n          title=\"Password must be strong as teenager's erection!\"\n          value={password}\n      onChange={onInputChange}\n      required\n        />\n\n        <button type=\"submit\">Sign Up</button>\n        \n    </StyledForm>)\n}\n\nexport default RegPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","nameInpudId","nanoid","emailInpudId","passwordInpudId","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","onInputChange","event","target","value","onSubmit","preventDefault","regThunk","console","log","htmlFor","type","id","pattern","title","onChange","required","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}